# -*- coding: utf-8 -*-
"""Image_Basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14FiLo2n30Jh05ig5IQHWVehzxfqFa8zu

Image Creation
"""

# Creating a (6, 8) grayscale image with a white pixel at (2, 3)
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
im = np.zeros((6,8), dtype=np.uint8)
im[2,3] = 255
fig, ax = plt.subplots(1, 1, figsize=(6, 8))
ax.imshow(im, cmap='gray', vmin=0, vmax=255)
ax.xaxis.set_ticks_position('top')
plt.show()

# Creating a (6, 8) color image with a pink pixel at (2, 3)
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
im = np.zeros((6,8,3), dtype=np.uint8)
im[2,3] = (255, 190, 203)
fig, ax = plt.subplots(1, 1, figsize=(6, 8))
ax.imshow(im)
ax.xaxis.set_ticks_position('top')
plt.show()

# Opening an Image and Displaying Using Matplotlib.
import cv2 as cv
import matplotlib.pyplot as plt
im = cv.imread('images/jolie.png')
fig, ax = plt.subplots(1, 1, figsize=(6, 8))
ax.imshow(cv.cvtColor(im, cv.COLOR_BGR2RGB))
ax.xaxis.set_ticks_position('top')
plt.show()

# Opening an Image and Displaying Using OpenCV.
import cv2 as cv
im = cv.imread('images/jolie.png')
cv.namedWindow('Image', cv.WINDOW_AUTOSIZE)
cv.imshow('Image', im)
cv.waitKey(0)
cv.destroyAllWindows()

# Opening an Image and Displaying Properties.
import cv2 as cv
import matplotlib.pyplot as plt
im = cv.imread('images/ryan.jpg')
fig, ax = plt.subplots(1, 1, figsize=(6, 8))
ax.imshow(cv.cvtColor(im, cv.COLOR_BGR2RGB))
ax.xaxis.set_ticks_position('top')
plt.show()
print('Image Shape:', im.shape)
print('Image Data Type:', im.dtype)
print('Image Size:', im.size)

# Open emma_gray.jpg and increase its brightness.
from turtle import title
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
im1 = cv.imread('images/emma_gray.jpg', cv.IMREAD_GRAYSCALE)
im2 = cv.add(im1, 100)
fig, ax = plt.subplots(1, 2, figsize=(6, 8))
ax[0].imshow(im1, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[1].imshow(im2, cmap='gray', vmin=0, vmax=255)
ax[1].set_title('Brightness Increased')
for a in ax:
    a.axis('off')
plt.show()

# Open emma_gray.jpg and increase its brightness [INCORRECT]
from turtle import title
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
im1 = cv.imread('images/emma_gray.jpg', cv.IMREAD_GRAYSCALE)
im2 = im1 + 100
fig, ax = plt.subplots(1, 2, figsize=(6, 8))
ax[0].imshow(im1, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[1].imshow(im2, cmap='gray', vmin=0, vmax=255)
ax[1].set_title('Brightness Increased')
for a in ax:
    a.axis('off')
plt.show()

# Extracting the Blue Channel from an Image.
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
im = cv.imread('images/rgb_flowers.jpg')
im_blue = im.copy()
im_blue[:,:,1] = 0
im_blue[:,:,2] = 0
fig, ax = plt.subplots(1, 2, figsize=(12, 8))
ax[0].imshow(cv.cvtColor(im, cv.COLOR_BGR2RGB))
ax[0].set_title('Original Image')
ax[1].imshow(cv.cvtColor(im_blue, cv.COLOR_BGR2RGB))
ax[1].set_title('Blue Channel')
for a in ax:
    a.axis('off')
plt.show()

# Extract the red and green channels from an image.
im_red = im.copy()
im_red[:,:,1] = 0
im_red[:,:,0] = 0
im_green = im.copy()
im_green[:,:,0] = 0
im_green[:,:,2] = 0
fig, ax = plt.subplots(1, 2, figsize=(12, 8))
ax[0].imshow(cv.cvtColor(im_red, cv.COLOR_BGR2RGB))
ax[0].set_title('Red Channel')
ax[1].imshow(cv.cvtColor(im_green, cv.COLOR_BGR2RGB))
ax[1].set_title('Green Channel')
for a in ax:
    a.axis('off')
plt.show()

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
im = cv.imread('images/pencils.jpg')
im_hsv = cv.cvtColor(im, cv.COLOR_BGR2HSV)
fig, ax = plt.subplots(2, 2, figsize=(12, 8))
ax[0, 0].imshow(cv.cvtColor(im, cv.COLOR_BGR2RGB))
ax[0, 0].set_title('Original Image')
ax[0, 1].imshow(im_hsv[:,:,0], cmap='gray')
ax[0, 1].set_title('Hue Channel')
ax[1, 0].imshow(im_hsv[:,:,1], cmap='gray')
ax[1, 0].set_title('Saturation Channel')
ax[1, 1].imshow(im_hsv[:,:,2], cmap='gray')
ax[1, 1].set_title('Value Channel')
for a in ax.ravel():
    a.axis('off')
plt.show()

# Segment the light-blue pencil from the image.
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
im = cv.imread('images/pencils.jpg')
im_hsv = cv.cvtColor(im, cv.COLOR_BGR2HSV)
mask = cv.inRange(im_hsv, (90, 100, 100), (130, 255, 255))
im_segmented = cv.bitwise_and(im, im, mask=mask)
fig, ax = plt.subplots(1, 2, figsize=(12, 8))
ax[0].imshow(cv.cvtColor(im, cv.COLOR_BGR2RGB))
ax[0].set_title('Original Image')
ax[1].imshow(cv.cvtColor(im_segmented, cv.COLOR_BGR2RGB))
ax[1].set_title('Segmented Image')
for a in ax:
    a.axis('off')
plt.show()

# Write the brightness increasing code using loops.
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
im1 = cv.imread('images/emma_gray.jpg', cv.IMREAD_GRAYSCALE)
im2 = np.zeros_like(im1)
for i in range(im1.shape[0]):
    for j in range(im1.shape[1]):
        im2[i,j] = im1[i,j] + 100
fig, ax = plt.subplots(1, 2, figsize=(6, 8))
ax[0].imshow(im1, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[1].imshow(im2, cmap='gray', vmin=0, vmax=255)
ax[1].set_title('Brightness Increased')
for a in ax:
    a.axis('off')
plt.show()

# Identity Transformations (Identity)
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
f = cv.imread('images/emma_gray.jpg', cv.IMREAD_GRAYSCALE)
t = np.arange(256, dtype=np.uint8)
g = t[f]
fig, ax = plt.subplots(1, 3, figsize=(12, 4))
ax[0].imshow(f, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[1].imshow(g, cmap='gray', vmin=0, vmax=255)
ax[1].set_title('Transformed Image')
for a in ax[0:2]:
    a.axis('off')
ax[2].plot(t)
ax[2].set_ylim([0, 255])
ax[2].set_xlim([0, 255])
ax[2].set_title('Transformation Function')
plt.show()

# Negative Transformation
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
f = cv.imread('images/katrina.jpg', cv.IMREAD_GRAYSCALE)
t = np.arange(255, -1, -1,  dtype=np.uint8)
g = t[f]
plt.plot(t)
cv.namedWindow('Image', cv.WINDOW_AUTOSIZE)
cv.imshow('Image', f)
cv.waitKey(0)
cv.imshow('Image', g)
cv.waitKey(0)
cv.destroyAllWindows()

# Intensity Windowing
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

c = np.array([(100, 50), (150, 200)])

t1 = np.linspace(0, c[0,1], c[0,0] + 1 - 0).astype('uint8')
print(len(t1))
t2 = np.linspace(c[0,1] + 1, c[1,1], c[1,0] - c[0,0]).astype('uint8')
print(len(t2))
t3 = np.linspace(c[1,1] + 1, 255, 255 - c[1,0]).astype('uint8')
print(len(t3))

transform = np.concatenate((t1, t2), axis=0).astype('uint8')
transform = np.concatenate((transform, t3), axis=0).astype('uint8')
print(len(transform))

fig, ax = plt.subplots()
ax.plot(transform)
ax.set_xlabel(r'Input, $f(\mathbf{x})$')
ax.set_ylabel('Output, $\mathrm{T}[f(\mathbf{x})]$')
ax.set_xlim(0,255)
ax.set_ylim(0,255)
ax.set_aspect('equal')
plt.show()


img_orig = cv.imread('images/katrina.jpg', cv.IMREAD_GRAYSCALE)
cv.namedWindow("Image", cv.WINDOW_AUTOSIZE)
cv.imshow("Image", img_orig)
cv.waitKey(0)
image_transformed = cv.LUT(img_orig, transform)
cv.imshow("Image", image_transformed)
cv.waitKey(0)
cv.destroyAllWindows()

# Plots of Functions for Gamma Correction
import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
gamma = [0.2, 0.5, 1, 2, 5]
for g in gamma:
    table = np.array([(i/255.0)**(g)*255.0 for i in np.arange(0,256)]).astype('uint8')
    ax.plot(table, label=r'$\gamma = {g}$'.format(g=g))
ax.legend(loc='best')
ax.set_xlim(0,255)
ax.set_ylim(0,255)
ax.set_aspect('equal')
ax.set_xlabel(r'Input, $f(\mathbf{x})$')
ax.set_ylabel('Output, $\mathrm{T}[f(\mathbf{x})]$')
plt.savefig('transform.png')
plt.show()

# Gamma Correction
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

gamma = 4
f = cv.imread('images/Fig0309(a)(washed_out_aerial_image).tif', cv.IMREAD_GRAYSCALE)

t = np.array([(i/255.0)**(gamma)*255 for i in np.arange(0,256)]).astype(np.uint8)
g = cv.LUT(f, t)

fig, ax = plt.subplots(1, 2, figsize=(12, 8))
ax[0].imshow(f, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[1].imshow(g, cmap='gray', vmin=0, vmax=255)
ax[1].set_title('Gamma Correction')
for a in ax:
    a.axis('off')
plt.show()

# Do teh above for gramma = 0.1, 0.2, 0.5, 1, 2, 5
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

gammas = [0.1, 0.2, 0.5, 1, 2, 5]
f = cv.imread('images/Fig0309(a)(washed_out_aerial_image).tif', cv.IMREAD_GRAYSCALE)

fig, ax = plt.subplots(2, 3, figsize=(12, 8))
for i, gamma in enumerate(gammas):
    t = np.array([(i/255.0)**(gamma)*255 for i in np.arange(0,256)]).astype(np.uint8)
    g = cv.LUT(f, t)
    ax[i//3, i%3].imshow(g, cmap='gray', vmin=0, vmax=255)
    ax[i//3, i%3].set_title(r'$\gamma = {gamma}$'.format(gamma=gamma))
    ax[i//3, i%3].axis('off')
plt.show()

# Histrogram Using Numpy
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

f = cv.imread('images/emma_gray.jpg', cv.IMREAD_GRAYSCALE)
hist, bins = np.histogram(f.ravel(), 256, [0, 256])
fig, ax = plt.subplots(1, 2, figsize=(12, 4))
ax[0].imshow(f, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[0].axis('off')
ax[1].plot(hist)
ax[1].set_title('Histogram')
ax[1].set_xlabel('Intensity Value')
ax[1].set_ylabel('Frequency')
plt.show()

# Histogram Using OpenCV
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

f = cv.imread('images/emma_gray.jpg', cv.IMREAD_GRAYSCALE)
hist = cv.calcHist([f], [0], None, [256], [0, 256])
fig, ax = plt.subplots(1, 2, figsize=(12, 4))
ax[0].imshow(f, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[0].axis('off')
ax[1].plot(hist)
ax[1].set_title('Histogram')
ax[1].set_xlabel('Intensity Value')
ax[1].set_ylabel('Frequency')
plt.show()

# Carry Our Histogram Equalization on the shells.tif Image
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

f = cv.imread('images/shells.tif', cv.IMREAD_GRAYSCALE)
g = cv.equalizeHist(f)
fig, ax = plt.subplots(1, 2, figsize=(12, 8))
ax[0].imshow(f, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[0].axis('off')
ax[1].imshow(g, cmap='gray', vmin=0, vmax=255)
ax[1].set_title('Histogram Equalization')
ax[1].axis('off')
plt.show()

# Do the Same Using a Hand-Computed Intensity Transfromation
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

f = cv.imread('images/shells.tif', cv.IMREAD_GRAYSCALE)
M, N = f.shape
L = 256
t = np.zeros(256, dtype=np.uint8)
hist, bins = np.histogram(f.ravel(), 256, [0, 256])
cdf = hist.cumsum()
cdf_min = cdf.min()
cdf_max = cdf.max()
t = np.array([(L-1)/(M*N)*cdf[i] for i in range(256)], dtype=np.uint8)
g = t[f]
fig, ax = plt.subplots(1, 2, figsize=(12, 8))
ax[0].imshow(f, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[0].axis('off')
ax[1].imshow(g, cmap='gray', vmin=0, vmax=255)
ax[1].set_title('Histogram Equalization')
ax[1].axis('off')
plt.show()

# Enhancing a breast Digital X-Ray Image
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt

f = cv.imread('images/Fig0304(a)(breast_digital_Xray).tif', cv.IMREAD_GRAYSCALE)
assert f is not None

# Negative
t = np.arange(255, -1, -1, dtype=np.uint8)
g = t[f]

# Display
fig, ax = plt.subplots(1, 2, figsize=(12, 8))
ax[0].imshow(f, cmap='gray', vmin=0, vmax=255)
ax[0].set_title('Original Image')
ax[0].axis('off')
ax[1].imshow(g, cmap='gray', vmin=0, vmax=255)
ax[1].set_title('Enhanced Image')
ax[1].axis('off')
plt.show()

t = np.arange(255, -1, -1, dtype=np.uint8)

t.dtype